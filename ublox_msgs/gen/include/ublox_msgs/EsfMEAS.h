#pragma once

#include <vector>
#include <cstdint>

namespace ublox_msgs {
    struct EsfMEAS {
        // ESF-MEAS (0x10 0x02);
        // External Sensor Fusion Measurements
        //; 
        // Possible data types for the data field are described in the ESF Measurement 
        // Data section;
        //
        
        static constexpr uint8_t CLASS_ID = 16;
        static constexpr uint8_t MESSAGE_ID = 2;
        
        uint32_t timeTag;               // Time tag of measurement generated by external 
                                     // sensor;
        
        uint16_t flags;                 // Flags. Set all unused bits to zero:
        static constexpr uint16_t FLAGS_TIME_MARK_SENT_MASK = 3;   // Time mark signal was supplied just 
                                               // prior to sending this message: 0 =;
        static constexpr uint16_t TIME_MARK_NONE = 0;
        static constexpr uint16_t TIME_MARK_EXT0 = 1;
        static constexpr uint16_t TIME_MARK_EXT = 2;
        static constexpr uint16_t FLAGS_TIME_MARK_EDGE = 4;        // Trigger on rising (0) or falling 
                                               // (1) edge of time mark signal;
        static constexpr uint16_t FLAGS_CALIB_T_TAG_VALID = 8;     // Calibration time tag available. 
                                               // Always set to zero.;
        
        uint16_t id;                              // Identification number of data provider
        
        // Start of repeated block (N times);
        std::vector<uint32_t> data;                // data, see mask below
        static constexpr uint32_t DATA_FIELD_MASK = 16777215;     // data
        static constexpr uint32_t DATA_TYPE_MASK = 1056964608;    // type of data (1..63)
        static constexpr uint32_t DATA_TYPE_SHIFT = 24;
        static constexpr uint32_t DATA_TYPE_NONE = 0;                     // data field contains no data
        static constexpr uint32_t DATA_TYPE_Z_AXIS_GYRO = 5;              // z-axis gyroscope angular rate 
                                                      // [deg/s *2^-12 signed];
        static constexpr uint32_t DATA_TYPE_WHEEL_TICKS_FRONT_LEFT = 6;   // front-left wheel ticks 
                                                      // Bits 0-22: unsigned tick value.; 
                                                      // Bit 23: direction indicator 
                                                      // (0=forward, 1=backward);
        static constexpr uint32_t DATA_TYPE_WHEEL_TICKS_FRONT_RIGHT = 7;  // front-right wheel ticks 
                                                      // Bits 0-22: unsigned tick value.; 
                                                      // Bit 23: direction indicator 
                                                      // (0=forward, 1=backward);
        static constexpr uint32_t DATA_TYPE_WHEEL_TICKS_REAR_LEFT = 8;    // rear-left wheel ticks 
                                                      // Bits 0-22: unsigned tick value.; 
                                                      // Bit 23: direction indicator 
                                                      // (0=forward, 1=backward);
        static constexpr uint32_t DATA_TYPE_WHEEL_TICKS_REAR_RIGHT = 9;   // rear-right wheel ticks 
                                                      // Bits 0-22: unsigned tick value.; 
                                                      // Bit 23: direction indicator 
                                                      // (0=forward, 1=backward);
        static constexpr uint32_t DATA_TYPE_SINGLE_TICK = 10;             // single tick (speed tick) 
                                                      // Bits 0-22: unsigned tick value.; 
                                                      // Bit 23: direction indicator 
                                                      // (0=forward, 1=backward);
        static constexpr uint32_t DATA_TYPE_SPEED = 11;                   // speed m/s * 1e-3 signed
        static constexpr uint32_t DATA_TYPE_GYRO_TEMPERATURE = 12;        // gyroscope temperature 
                                                      // [deg Celsius * 1e-2 signed];
        static constexpr uint32_t DATA_TYPE_GYRO_ANG_RATE_Y = 13;         // y-axis gyroscope angular rate 
                                                      // [deg/s *2^-12 signed];
        static constexpr uint32_t DATA_TYPE_GYRO_ANG_RATE_X = 14;         // x-axis gyroscope angular rate 
                                                      // [deg/s *2^-12 signed];
        static constexpr uint32_t DATA_TYPE_ACCELEROMETER_X = 16;         // x-axis accelerometer specific 
                                                      // [force m/s^2 *2^-10 signed];
        static constexpr uint32_t DATA_TYPE_ACCELEROMETER_Y = 17;         // y-axis accelerometer specific 
                                                      // [force m/s^2 *2^-10 signed];
        static constexpr uint32_t DATA_TYPE_ACCELEROMETER_Z = 18;         // z-axis accelerometer specific 
                                                      // [force m/s^2 *2^-10 signed];
        
        
        
        // End of repeated block
        
        // Start of optional block (size is either 0 or 1);
        std::vector<uint32_t> calibTtag;           // Receiver local time calibrated.
                                     // This field must not be supplied when;
                                     // calibTtagValid is set to 0 [ms]
        // End of optional block;
    };
}
